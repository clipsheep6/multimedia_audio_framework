# Copyright (c) 2021-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//drivers/hdf_core/adapter/uhdf2/uhdf.gni")
import("//foundation/multimedia/audio_framework/config.gni")
import("//foundation/multimedia/audio_framework/ressche_part.gni")

pulseaudio_dir = "//third_party/pulseaudio"
pulseaudio_build_path = "//third_party/pulseaudio/ohosbuild"

group("audio_effect_library_packages") {
  deps = []
  if (close_source_flag == true && target_cpu == "arm64") {
    deps += [ "${histreamer_ext_dir}/audio_effect:audio_effect_library" ]
  }
}

group("audio_service_packages") {
  deps = [
    ":audio_common",
    ":audio_service",
    ":audio_service_init",
  ]
}

ohos_shared_library("audio_common") {
  sanitize = {
    cfi = true
    debug = false
    blocklist = "${audio_fwk_path}/cfi_blocklist.txt"
  }

  install_enable = true

  include_dirs = [
    "common/include",
    "${audio_fwk_path}/interfaces/inner_api/native/audiocommon/include",
  ]

  sources = [
    "common/src/audio_process_config.cpp",
    "common/src/linear_pos_time_model.cpp",
    "common/src/oh_audio_buffer.cpp",
  ]

  cflags = [
    "-Wall",
    "-Werror",
  ]
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }

  deps = [ "${audio_fwk_path}/frameworks/native/audioutils:audio_utils" ]

  external_deps = [
    "c_utils:utils",
    "hisysevent_native:libhisysevent",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]

  subsystem_name = "multimedia"
  innerapi_tags = [ "platformsdk_indirect" ]
  part_name = "audio_framework"
}

config("audio_client_public_config") {
  include_dirs = [
    "//foundation/multimedia/audio_framework/frameworks/native/audiopolicy/include",
    "//foundation/multimedia/audio_framework/frameworks/native/audioutils/include",
    "//foundation/multimedia/audio_framework/frameworks/native/audiostream/include",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiocapturer/include",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiocommon/include",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiomanager/include",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiorenderer/include",
    "//foundation/multimedia/audio_framework/services/audio_service/client/include",
    "${audio_fwk_path}/services/audio_service/common/include",
    "//foundation/multimedia/audio_framework/services/audio_policy/client/include",
    "//foundation/multimedia/audio_framework/services/audio_policy/common/include",
  ]

  include_dirs += [ ipc_dir ]

  cflags = [
    "-Wall",
    "-Werror",
  ]

  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
}

ohos_shared_library("audio_client") {
  sanitize = {
    cfi = true
    integer_overflow = true
    debug = false
    blocklist = "//foundation/multimedia/audio_framework/cfi_blocklist.txt"
  }
  install_enable = true
  sources = [
    "client/src/audio_device_descriptor.cpp",
    "client/src/audio_group_manager.cpp",
    "client/src/audio_manager_listener_stub.cpp",
    "client/src/audio_manager_proxy.cpp",
    "client/src/audio_process_in_client.cpp",
    "client/src/audio_process_proxy.cpp",
    "client/src/audio_routing_manager.cpp",
    "client/src/audio_service_client.cpp",
    "client/src/audio_stream.cpp",
    "client/src/audio_stream_manager.cpp",
    "client/src/audio_stream_tracker.cpp",
    "client/src/audio_system_manager.cpp",
  ]

  public_configs = [ ":audio_client_public_config" ]

  deps = [
    ":audio_common",
    "$pulseaudio_build_path/src/pulse:pulse",
    "//foundation/multimedia/audio_framework/frameworks/native/audioutils:audio_utils",
    "//foundation/multimedia/audio_framework/services/audio_policy:audio_policy_client",
  ]

  include_dirs = [
    "../../../../foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
    "../../../../utils/system/safwk/native/include",
    "../../../../commonlibrary/c_utils/base/include",
    "$pulseaudio_dir/src",
    "$pulseaudio_dir/confgure/src",
    "$pulseaudio_dir/include",
    "$pulseaudio_build_path/include",
    "//third_party/bounds_checking_function/include",
    "${audio_fwk_path}/services/audio_service/server/include",
  ]

  include_dirs += [ multimedia_audio_framework_pulse_audio ]

  external_deps = [
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hisysevent_native:libhisysevent",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  version_script = "../../audio_framework.versionscript"
  innerapi_tags = [ "platformsdk" ]

  subsystem_name = "multimedia"
  part_name = "audio_framework"
}

ohos_prebuilt_etc("audio_service_init") {
  source = "etc/pulseaudio.cfg"
  relative_install_dir = "init"
  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

config("audio_service_config") {
  visibility = [ ":*" ]
  visibility += [ "//foundation/multimedia/audio_framework/test/fuzztest/*" ]

  include_dirs = [
    "common/include",
    "server/include",
    "client/include",
    "${audio_fwk_path}/interfaces/inner_api/native/audiocommon/include",
    "${audio_fwk_path}/interfaces/inner_api/native/audiomanager/include",
    "${audio_fwk_path}/frameworks/native/audiopolicy/include",
    "${audio_fwk_path}/frameworks/native/audioeffect/include",
    "${audio_fwk_path}/frameworks/native/audioutils/include",
    "${audio_fwk_path}/frameworks/native/audioschedule/include",
    "${fwk_native_hdiadapter_path}/sink/bluetooth",
    "${fwk_native_hdiadapter_path}/sink/common",
    "${fwk_native_hdiadapter_path}/sink/file",
    "${fwk_native_hdiadapter_path}/sink/fast",
    "${fwk_native_hdiadapter_path}/sink/remote_fast",
    "${fwk_native_hdiadapter_path}/sink/primary",
    "${fwk_native_hdiadapter_path}/sink/remote",
    "${fwk_native_hdiadapter_path}/source/common",
    "${fwk_native_hdiadapter_path}/source/primary",
    "${fwk_native_hdiadapter_path}/source/remote_fast",
    "//drivers/peripheral/audio/interfaces/include",
    "${audio_fwk_path}/services/audio_policy/server/include/service/effect",
  ]

  if (target_cpu == "arm") {
    cflags = [ "-DBINDER_IPC_32BIT" ]
  }
}

ohos_shared_library("audio_process_service") {
  sanitize = {
    cfi = true
    debug = false
    blocklist = "${audio_fwk_path}/cfi_blocklist.txt"
  }
  install_enable = true

  sources = [
    "server/src/audio_endpoint.cpp",
    "server/src/audio_process_in_server.cpp",
    "server/src/audio_process_stub.cpp",
    "server/src/audio_service.cpp",
  ]

  configs = [ ":audio_service_config" ]

  deps = [
    ":audio_common",
    "${audio_fwk_path}/frameworks/native/audioschedule:audio_schedule",
    "${audio_fwk_path}/frameworks/native/audioutils:audio_utils",
    "${audio_fwk_path}/frameworks/native/hdiadapter/sink:fast_audio_renderer_sink",
    "${audio_fwk_path}/frameworks/native/hdiadapter/sink:remote_audio_renderer_sink",
    "${audio_fwk_path}/frameworks/native/hdiadapter/sink:remote_fast_audio_renderer_sink",
    "${audio_fwk_path}/frameworks/native/hdiadapter/source:remote_fast_audio_capturer_source",
  ]

  public_deps = [ "//third_party/bounds_checking_function:libsec_static" ]

  external_deps = [
    "c_utils:utils",
    "hicollie_native:libhicollie",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]

  subsystem_name = "multimedia"
  part_name = "audio_framework"
}

ohos_shared_library("audio_service") {
  sanitize = {
    cfi = true
    debug = false
    blocklist = "//foundation/multimedia/audio_framework/cfi_blocklist.txt"
  }
  install_enable = true

  sources = [
    "server/src/audio_effect_server.cpp",
    "server/src/audio_manager_listener_proxy.cpp",
    "server/src/audio_manager_stub.cpp",
    "server/src/audio_server.cpp",
  ]

  configs = [ ":audio_service_config" ]

  if ("${product_name}" == "m40") {
    cflags = [ "-DPRODUCT_M40" ]
  }

  deps = [
    ":audio_common",
    ":audio_process_service",
    "$pulseaudio_build_path/src/daemon:pulseaudio",
    "${audio_fwk_path}/frameworks/native/audioeffect:audio_effect",
    "${audio_fwk_path}/frameworks/native/audioschedule:audio_schedule",
    "${audio_fwk_path}/frameworks/native/audioutils:audio_utils",
    "${fwk_native_hdiadapter_path}/sink:audio_renderer_sink",
    "${fwk_native_hdiadapter_path}/sink:bluetooth_renderer_sink",
    "${fwk_native_hdiadapter_path}/sink:remote_audio_renderer_sink",
    "${fwk_native_hdiadapter_path}/sink:remote_fast_audio_renderer_sink",
    "${fwk_native_hdiadapter_path}/sink:renderer_sink_adapter",
    "${fwk_native_hdiadapter_path}/source:audio_capturer_source",
    "${fwk_native_hdiadapter_path}/source:capturer_source_adapter",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "hicollie_native:libhicollie",
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_single",
    "power_manager:powermgr_client",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (ressche_enable == true) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
  }

  subsystem_name = "multimedia"
  part_name = "audio_framework"
}

group("audio_service_test_packages") {
  deps = [
    ":audio_hdi_device_test",
    ":audio_multichannel_test",
    ":audio_process_client_test",
    ":audio_service_playback_test",
    ":audio_service_record_test",
  ]
}

ohos_executable("audio_process_client_test") {
  install_enable = false

  include_dirs = [
    "${audio_fwk_path}/interfaces/inner_api/native/audiocommon/include",
    "${audio_fwk_path}/frameworks/native/audioutils/include",
    "${audio_fwk_path}/services/audio_service/client/include",
  ]

  sources = [ "test/example/audio_process_client_test.cpp" ]

  deps = [
    ":audio_client",
    "./../../frameworks/native/audioutils:audio_utils",
  ]

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "init:libbegetutil",
  ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_executable("audio_hdi_device_test") {
  install_enable = false

  include_dirs = [
    "${audio_fwk_path}/frameworks/native/hdiadapter/sink",
    "${audio_fwk_path}/interfaces/inner_api/native/audiocommon/include",
    "${audio_fwk_path}/frameworks/native/audioutils/include",
    "${audio_fwk_path}/frameworks/native/hdiadapter/sink/common",
    "${audio_fwk_path}/frameworks/native/hdiadapter/sink/fast",
    "//commonlibrary/c_utils/base/include",
    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
    "//drivers/peripheral/audio/interfaces/include",
    "//commonlibrary/c_utils/base/include",
  ]

  cflags = [ "-DDEBUG_DIRECT_USE_HDI" ]

  sources = [
    "${audio_fwk_path}/frameworks/native/hdiadapter/sink/fast/fast_audio_renderer_sink.cpp",
    "${audio_fwk_path}/frameworks/native/hdiadapter/sink/remote_fast/remote_fast_audio_renderer_sink.cpp",
    "test/example/audio_hdi_device_test.cpp",
  ]

  deps = [
    "${audio_fwk_path}/frameworks/native/audioutils:audio_utils",
    "${audio_fwk_path}/frameworks/native/hdiadapter/sink:fast_audio_renderer_sink",
    "${audio_fwk_path}/frameworks/native/hdiadapter/sink:remote_fast_audio_renderer_sink",
    multimedia_audio_framework_hdi_audio_client,
  ]

  external_deps = [
    "c_utils:utils",
    "hiviewdfx_hilog_native:libhilog",
    "power_manager:powermgr_client",
  ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_executable("audio_service_playback_test") {
  install_enable = false

  sources = [ "test/example/playback_test.cpp" ]

  configs = [ ":audio_client_public_config" ]

  deps = [ ":audio_client" ]

  include_dirs = [
    "../../../../foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
    "../../../../utils/system/safwk/native/include",
    "../../../../commonlibrary/c_utils/base/include",
    "$pulseaudio_dir/src",
    "$pulseaudio_dir/confgure/src",
    "$pulseaudio_dir/include",
    "$pulseaudio_build_path/include",
    "//third_party/bounds_checking_function/include",
  ]

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_single",
  ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_executable("audio_service_record_test") {
  install_enable = false

  sources = [ "test/example/record_test.cpp" ]

  configs = [ ":audio_client_public_config" ]

  include_dirs = [
    "../../../../foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
    "../../../../utils/system/safwk/native/include",
    "../../../../commonlibrary/c_utils/base/include",
    "$pulseaudio_dir/src",
    "$pulseaudio_dir/confgure/src",
    "$pulseaudio_dir/include",
    "$pulseaudio_build_path/include",
    "//third_party/bounds_checking_function/include",
  ]

  deps = [ ":audio_client" ]

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_single",
  ]
  part_name = "audio_framework"
  subsystem_name = "multimedia"
}

ohos_executable("audio_multichannel_test") {
  install_enable = false

  sources = [ "test/example/audio_multichannel_test.cpp" ]

  configs = [ ":audio_client_public_config" ]

  include_dirs = [
    "../../../../foundation/communication/ipc/interfaces/innerkits/ipc_core/include",
    "../../../../utils/system/safwk/native/include",
    "../../../../commonlibrary/c_utils/base/include",
    "$pulseaudio_dir/src",
    "$pulseaudio_dir/confgure/src",
    "$pulseaudio_dir/include",
    "$pulseaudio_build_path/include",
    "//third_party/bounds_checking_function/include",
  ]

  deps = [ ":audio_client" ]

  external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_single",
  ]

  part_name = "audio_framework"
  subsystem_name = "multimedia"
}
