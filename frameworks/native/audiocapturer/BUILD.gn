# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//drivers/hdf_core/adapter/uhdf2/uhdf.gni")
import("//foundation/multimedia/audio_framework/config.gni")

ohos_shared_library("audio_capturer_source") {
  install_enable = true
  sources = [ "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer/src/audio_capturer_source.cpp" ]
  cflags = [ "-fPIC" ]
  cflags += [ "-Wall" ]
  if ("${product_name}" == "m40") {
    cflags += [ "-DPRODUCT_M40" ]
  }
  cflags_cc = cflags

  include_dirs = [
    "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer/include",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiocommon/include",
    "//commonlibrary/c_utils/base/include",
    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
    "//third_party/bounds_checking_function/include",
  ]
  public_configs = [ ":audio_external_library_config" ]

  deps = [
    "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog",
    "//third_party/bounds_checking_function:libsec_static",
  ]

  deps += [ multimedia_audio_framework_hdi_audio_client ]

  part_name = "multimedia_audio_framework"
  subsystem_name = "multimedia"

  external_deps = [ "drivers_interface_audio:libaudio_proxy_1.0" ]
}
ohos_shared_library("remote_audio_capturer_source") {
  install_enable = true
  sources = [ "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer/src/remote_audio_capturer_source.cpp" ]
  cflags = [ "-fPIC" ]
  cflags += [ "-Wall" ]
  cflags_cc = cflags
  if ("${product_name}" == "m40") {
    cflags += [ "-DPRODUCT_M40" ]
  }

  include_dirs = [
    "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer/include",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiocommon/include",
    "//commonlibrary/c_utils/base/include",
    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
  ]
  public_configs = [ ":audio_external_library_config" ]

  deps = [ "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog" ]

  if ("${product_name}" == "m40") {
    deps += [ "//foundation/distributedhardware/distributed_audio/hdf_service/distributed_audio/audio_client:daudio_client" ]
  } else {
    deps += [
      "//drivers/peripheral/audio/hal/hdi_binder/proxy:hdi_audio_client",
    ]
  }

  part_name = "multimedia_audio_framework"
  subsystem_name = "multimedia"
  external_deps = [ "drivers_interface_audio:libaudio_proxy_1.0" ]
}

ohos_shared_library("audio_capturer_file_source") {
  install_enable = true

  sources = [ "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer/src/audio_capturer_file_source.cpp" ]

  cflags = [ "-fPIC" ]
  cflags += [ "-Wall" ]

  cflags_cc = cflags

  include_dirs = [
    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
    "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer/include",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiocommon/include",
    "//commonlibrary/c_utils/base/include",
  ]

  public_configs = [ ":audio_external_library_config" ]

  deps = [ "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog" ]

  part_name = "multimedia_audio_framework"
  subsystem_name = "multimedia"
  external_deps = [
    "c_utils:utils",
    "drivers_interface_audio:libaudio_proxy_1.0",
  ]
}

ohos_shared_library("capturer_source_adapter") {
  install_enable = true

  sources = [
    "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer/src/capturer_source_adapter.c",
    "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer/src/i_audio_capturer_source.cpp",
  ]

  cflags = [ "-fPIC" ]
  cflags += [ "-Wall" ]

  cflags_cc = cflags

  include_dirs = [
    "//base/hiviewdfx/hilog/interfaces/native/innerkits/include",
    "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer/include",
    "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiocommon/include",
    "//third_party/bounds_checking_function:libsec_static",
    "//commonlibrary/c_utils/base:utils",
  ]

  public_configs = [ ":audio_external_library_config" ]

  deps = [
    "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog",
    "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer:audio_capturer_file_source",
    "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer:audio_capturer_source",
    "//foundation/multimedia/audio_framework/frameworks/native/audiocapturer:remote_audio_capturer_source",
  ]

  part_name = "multimedia_audio_framework"
  subsystem_name = "multimedia"

  external_deps = [ "drivers_interface_audio:libaudio_proxy_1.0" ]
}

config("audio_external_library_config") {
  include_dirs = [ "//foundation/multimedia/audio_framework/interfaces/inner_api/native/audiocommon/include" ]
}
